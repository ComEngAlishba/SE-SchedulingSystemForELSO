@layout LoginLayout
@page "/View_Meeting/{Meeting_Id}/{Student_Username}"
@using Models;
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@inject IToastService toastService
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">

    <!-- Mobile Specific Metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <!-- Font-->
    <link rel="stylesheet" type="text/css" href="css/montserrat-font.css">
    <link rel="stylesheet" type="text/css" href="fonts/material-design-iconic-font/css/material-design-iconic-font.min.css">
    <!-- Main Style Css -->
    <link rel="stylesheet" href="css/View_Meeting_Page.css" />
    <title>Sceduling System for ELSO| View Meeting Page</title>
</head>
<body class="form-v10">
    <div class="page-content">
        <div class="form-v10-content">
            <form class="form-detail" action="#" method="post" id="myform">
                <div class="form-left">
                    <h2>Meeting Details</h2>
                    <div class="form-group">
                        <div class="form-row form-row-1">
                            <label> Meeting Id:</label>
                            <input type="text" name="meeting_id" id="meeting_id" @bind="@Meeting_Id" class="input-text" placeholder="Meeting ID" readonly>
                        </div>
                        <div class="form-row form-row-2">
                            <label> Meeting Topic:</label>
                            <input type="text" @bind="@t.MeetingTopic" name="meeting_topic" id="meeting_place" class="input-text" readonly>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="form-row form-row-1">
                            <label> Teacher Name:</label>
                            <input type="text" @bind="@r.FullName" name="teacher_name" id="teacher_name" class="input-text" readonly>
                        </div>
                        <div class="form-row form-row-2">
                            <label> Teacher Email:</label>
                            <input type="text" @bind="@r.Email" name="teacher_email" id="teacher_email" class="input-text" readonly>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="form-row form-row-1">
                            <label> Start Time:</label>
                            <input type="text" @bind="@t.StartTime" name="meeting_start_time" id="meeting_start_time" class="input-text" readonly>
                        </div>
                        <div class="form-row form-row-2">
                            <label> End Time:</label>
                            <input type="text" @bind="@t.EndTime" name="meeting_end_time" id="meeting_end_time" class="input-text" readonly>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="form-row form-row-1">
                            <a class="btn btn-danger" @onclick="() => Meeting_Request_count()">@request</a>
                        </div>
                        <div class="form-row form-row-4">
                            <a class="btn btn-primary" @onclick="() => Cancel()">Cancel</a>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</body><!-- This templates was made by Colorlib (https://colorlib.com) -->
</html>

@code {
    [Parameter]
    public string Meeting_Id { get; set; }
    [Parameter]
    public string Student_Username { get; set; }
    public string request { get; set; }
    TimeSlotsTable t = new TimeSlotsTable();
    TeacherTable r = new TeacherTable();
    List<BookMeetingTable> tr;
    protected override async Task OnInitializedAsync()
    {
        var meeting_id = Convert.ToInt32(Meeting_Id);
        SchedulingSystemForELSOContext db = new SchedulingSystemForELSOContext();
        t = db.TimeSlotsTable.Where(s => s.Id == meeting_id).FirstOrDefault();
        r = db.TeacherTable.Where(u => u.Username == t.TeacherUsername).FirstOrDefault();
        var already_check = db.BookMeetingTable.Where(a => a.MeetingId == meeting_id && a.StudentUsername == Student_Username).ToList();
        if (already_check.Count > 0)
        {
            if (already_check[0].Request == false)
            {
                request = "Undo";
            }
            else
            {
                request = "Accepted";
            }
        }
        else
        {
            request = "Send";
        }
    }
    void Meeting_Request()
    {
        if (request == "Send")
        {
            Send_Meeting_Request();
            request = "Undo";
            StateHasChanged();

        }
        else if (request == "Undo")
        {
            Undo_Meeting_Request();
            request = "Send";
            StateHasChanged();
        }
        else
        {
            toastService.ShowSuccess("Your Request has been Accepted");
        }
    }

    void Meeting_Request_count()
    {
        SchedulingSystemForELSOContext db = new SchedulingSystemForELSOContext();
        var students = db.BookMeetingTable.Where(a => a.MeetingId == Convert.ToInt32(Meeting_Id)).ToList();

        if (students.Count < 8)
        {
            Meeting_Request();
        }
        else
        {
            toastService.ShowWarning("Meeting Space Filled");
        }
    }

    void Send_Meeting_Request()
    {
        SchedulingSystemForELSOContext db = new SchedulingSystemForELSOContext();
        BookMeetingTable b = new BookMeetingTable();
        b.MeetingId = t.Id;
        b.StudentUsername = Student_Username;
        b.StudentEmail = db.RegisterTable.Where(r => r.Username == Student_Username).FirstOrDefault().Email;
        b.StudentRegisteration = db.RegisterTable.Where(r => r.Username == Student_Username).FirstOrDefault().RegNo;
        b.Request = false;
        db.BookMeetingTable.Add(b);
        db.SaveChanges();
        toastService.ShowSuccess("Request has been send successfully....");
    }
    void Undo_Meeting_Request()
    {
        SchedulingSystemForELSOContext db = new SchedulingSystemForELSOContext();
        var undo = db.BookMeetingTable.Where(a => a.MeetingId == Convert.ToInt32(Meeting_Id) && a.StudentUsername == Student_Username).ToList()[0];
        db.BookMeetingTable.Remove(undo);
        db.SaveChanges();
        toastService.ShowSuccess("Request has been Undo successfully....");
    }
    void Cancel()
    {
        navigationManager.NavigateTo("/Selects_Meeting_Page/" + Student_Username);
    }

}
